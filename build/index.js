'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var React = require('react');

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};

var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

function createCommonjsModule(fn, module) {
	return module = { exports: {} }, fn(module, module.exports), module.exports;
}

var performanceNow = createCommonjsModule(function (module) {
// Generated by CoffeeScript 1.12.2
(function() {
  var getNanoSeconds, hrtime, loadTime, moduleLoadTime, nodeLoadTime, upTime;

  if ((typeof performance !== "undefined" && performance !== null) && performance.now) {
    module.exports = function() {
      return performance.now();
    };
  } else if ((typeof process !== "undefined" && process !== null) && process.hrtime) {
    module.exports = function() {
      return (getNanoSeconds() - nodeLoadTime) / 1e6;
    };
    hrtime = process.hrtime;
    getNanoSeconds = function() {
      var hr;
      hr = hrtime();
      return hr[0] * 1e9 + hr[1];
    };
    moduleLoadTime = getNanoSeconds();
    upTime = process.uptime() * 1e9;
    nodeLoadTime = moduleLoadTime - upTime;
  } else if (Date.now) {
    module.exports = function() {
      return Date.now() - loadTime;
    };
    loadTime = Date.now();
  } else {
    module.exports = function() {
      return new Date().getTime() - loadTime;
    };
    loadTime = new Date().getTime();
  }

}).call(commonjsGlobal);


});

var root = typeof window === 'undefined' ? commonjsGlobal : window
  , vendors = ['moz', 'webkit']
  , suffix = 'AnimationFrame'
  , raf = root['request' + suffix]
  , caf = root['cancel' + suffix] || root['cancelRequest' + suffix];

for(var i = 0; !raf && i < vendors.length; i++) {
  raf = root[vendors[i] + 'Request' + suffix];
  caf = root[vendors[i] + 'Cancel' + suffix]
      || root[vendors[i] + 'CancelRequest' + suffix];
}

// Some versions of FF have rAF but not cAF
if(!raf || !caf) {
  var last = 0
    , id = 0
    , queue = []
    , frameDuration = 1000 / 60;

  raf = function(callback) {
    if(queue.length === 0) {
      var _now = performanceNow()
        , next = Math.max(0, frameDuration - (_now - last));
      last = next + _now;
      setTimeout(function() {
        var cp = queue.slice(0);
        // Clear queue here to prevent
        // callbacks from appending listeners
        // to the current frame's queue
        queue.length = 0;
        for(var i = 0; i < cp.length; i++) {
          if(!cp[i].cancelled) {
            try{
              cp[i].callback(last);
            } catch(e) {
              setTimeout(function() { throw e }, 0);
            }
          }
        }
      }, Math.round(next));
    }
    queue.push({
      handle: ++id,
      callback: callback,
      cancelled: false
    });
    return id
  };

  caf = function(handle) {
    for(var i = 0; i < queue.length; i++) {
      if(queue[i].handle === handle) {
        queue[i].cancelled = true;
      }
    }
  };
}

var raf_1 = function(fn) {
  // Wrap in a new function to prevent
  // `cancel` potentially being assigned
  // to the native rAF function
  return raf.call(root, fn)
};
var cancel = function() {
  caf.apply(root, arguments);
};
var polyfill = function(object) {
  if (!object) {
    object = root;
  }
  object.requestAnimationFrame = raf;
  object.cancelAnimationFrame = caf;
};
raf_1.cancel = cancel;
raf_1.polyfill = polyfill;

var AnimatedNumbersReact = function (props) {
    var initialValue = props.initialValue, style = props.style, value = props.value, duration = props.duration, stepPrecision = props.stepPrecision, component = props.component, formatValue = props.formatValue, frameStyle = props.frameStyle;
    var _a = React.useState(initialValue), currentValue = _a[0], setCurrentValue = _a[1];
    var _b = React.useState(initialValue), fromValue = _b[0], setFromValue = _b[1];
    var _c = React.useState(0), startTime = _c[0], setStartTime = _c[1];
    var _d = React.useState(0), currentTime = _d[0], setCurrentTime = _d[1];
    var _e = React.useState(), tweenHandle = _e[0], setTweenHandle = _e[1];
    React.useEffect(function () {
        prepareTween();
        return function () { return endTween(); };
    });
    var prepareTween = function () {
        setTweenHandle(raf_1(function (timestamp) {
            tweenValue(timestamp, true);
        }));
    };
    var endTween = function () {
        raf_1.cancel(tweenHandle);
        setCurrentValue(value);
    };
    var ensureSixtyFps = function (timestamp) {
        return !currentTime || timestamp - currentTime > 16;
    };
    var tweenValue = function (timestamp, start) {
        // @ts-ignore
        if (!ensureSixtyFps(timestamp))
            return setTweenHandle(raf_1(tweenValue));
        var nCurrentTime = timestamp;
        var nStartTime = start ? timestamp : startTime;
        var nFromValue = start ? currentValue : fromValue;
        var newValue;
        if (nCurrentTime - nStartTime >= duration) {
            newValue = value;
        }
        else {
            newValue =
                nFromValue +
                    (value - nFromValue) * ((nCurrentTime - nStartTime) / duration);
        }
        if (newValue === value)
            return endTween();
        setCurrentValue(newValue);
        setStartTime(nStartTime ? nStartTime : nCurrentTime);
        setFromValue(nFromValue);
        setCurrentTime(nCurrentTime);
        // @ts-ignore
        setTweenHandle(raf_1(tweenValue));
    };
    var adjustedValue = currentValue;
    var direction = value - fromValue;
    if (currentValue !== value) {
        if (stepPrecision > 0) {
            adjustedValue = Number(currentValue.toFixed(stepPrecision));
        }
        else if (direction < 0 && stepPrecision === 0) {
            adjustedValue = Math.floor(currentValue);
        }
        else if (direction > 0 && stepPrecision === 0) {
            adjustedValue = Math.ceil(currentValue);
        }
    }
    var perc = Math.abs(((adjustedValue - fromValue) / (value - fromValue)) * 100);
    var currStyle = frameStyle ? frameStyle(perc) : {};
    var nStyle = {};
    if (style && currStyle) {
        nStyle = __assign(__assign({}, style), currStyle);
    }
    else if (currStyle) {
        nStyle = currStyle;
    }
    return React.createElement(component, __assign(__assign({}, props), { style: nStyle }), formatValue ? formatValue(adjustedValue) : adjustedValue);
};

exports.default = AnimatedNumbersReact;
//# sourceMappingURL=index.js.map
